function [x, y_new] = finite_difference()
    clc;
    clear;

    % Problem setup
    a = 0; b = 1;
    alfa = 0; beta = 0;
    N = 10;
    h = (b - a) / N;
    x = linspace(a, b, N+1);

    % Coefficients for tridiagonal system
    a1 = -1 * ones(1, N-1);               % Lower diagonal
    b1 = (2 + h^2) * ones(1, N-1);        % Main diagonal
    c1 = -1 * ones(1, N-1);               % Upper diagonal
    d1 = -h^2 * ones(1, N-1);             % RHS from +1 term

    % Adjust for boundary conditions
    d1(1) = d1(1) - a1(1)*alfa;
    d1(end) = d1(end) - c1(end)*beta;

    % Thomas algorithm - forward elimination
    for i = 2:N-1
        m = a1(i) / b1(i-1);
        b1(i) = b1(i) - m * c1(i-1);
        d1(i) = d1(i) - m * d1(i-1);
    end

    % Thomas algorithm - back substitution
    y_inner = zeros(1, N-1);
    y_inner(end) = d1(end) / b1(end);
    for i = N-2:-1:1
        y_inner(i) = (d1(i) - c1(i) * y_inner(i+1)) / b1(i);
    end

    % Complete solution including boundary values
    y_new = [alfa, y_inner, beta];

    % Plotting
    plot(x, y_new, 'b-o');
    xlabel('x');
    ylabel('y');
    title('Solution of d^2y/dx^2 + y + 1 = 0 with y(0)=0, y(1)=0');
    grid on;
end



ANother______---------

function y_new=finite_differenceone()
a=1;b=2;
alpha=1;beta=2;N=10;
h=(b-a)/N ;
x=linspace(a,b,N+1);
y_new=zeros(1,N+1);
p=@(x) (-2/x^2);
q=@(x) (2/x^2);
r=@(x) sin(log(x))/x.^2 ;
%y_(1)=alpha ;
%y_interi(N+1)=beta;
a1=zeros(1,N-1);
b1=zeros(1,N-1);
c1=zeros(1,N-1);
d1=zeros(1,N-1);
for i=1:N-1
    a1(i)=-1-(h/2)*p(x(i));
    b1(i)=2+q(x(i));
    c1(i)=1+(h/2)*p(x(i));
    d1(i)=-h.^2*r(x(i));
end
d1(1)=d1(1)-a1(1)*alpha;
d1(end)=d1(end)-c1(end)*beta;
A=zeros(1,N);
B=zeros(1,N);
A(1)=b1(1);
B(1)=d1(1);
for i=2:N-1
    A(i)=b1(i)-(a1(i)/A(i-1))*c1(i-1);
    B(i)=d1(i)-(a1(i)/A(i-1))*B(i-1);
end
y_interi=zeros(1,N-1);
y_interi(N-1)=B(N-1)/A(N-1);
for i=N-2:-1:1
    y_interi(i)=(B(i)-c1(i)*y_interi(i+1))/A(i) ;
end
y_new=[alpha y_interi beta];
plot(x,y_new)
%Untitled(1,2,1,2,10)
    
